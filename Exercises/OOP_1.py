#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sat Mar  2 15:32:07 2024@author: kehanluo"""class Student:    '''    A class of students' information    '''    curve_per = 1.04  # This is the percentage of the curve I wanna give    stu_num = 0       # This counts the total number of the students    def __init__(self, name, netID, score):        self.name = name        self.netID = netID        self.score = score        Student.stu_num += 1    # I can get the total number of students from this    @property       # I can get the first name    def first(self):        return self.name.split(' ')[0]    @property       # I can get the last name    def last(self):        return self.name.split(' ')[1]    @property       # I can get the email    def email(self):        if self.netID != None:            return self.netID + '@nyu.edu'        else:            return None    @first.setter   # I can change the first name and pass to the change of the name    def first(self, first):        self.name = ' '.join([first, self.last])    @last.setter   # I can change the last name and pass to the change of the name    def last(self, last):        self.name = ' '.join([self.first, last])    @email.setter   # I can change the email and pass to the change of the netID    def email(self, email):        self.netID = email.split('@')[0]    @email.deleter  # I can delete the email and pass to the delete of the netID    def email(self):        self.netID = None    def curve(self):        if self.score < 90:    # Students won't get curved if they have already got good scores            self.score *= self.curve_per            self.score = int(self.score)    @classmethod        # I can set the curve by a number    def set_curve(cls, amt):        cls.set_curve = amt    @classmethod        # I can add new student into the class by a string    def from_string(cls, new_stu):        name, netID, score = new_stu.split(', ')        return cls(name, netID, int(score))    @staticmethod       # I can get whether a date is a schoolday    def is_schoolday(day):        if day.weekday() == 5 or day.weekday() == 6:            return False        return True    def __repr__(self):     # define base output        return "Student('{}', '{}', {})".format(self.name, self.netID, self.score)    def __str__(self):      # define user-friendly ouput        return '{} - {}'.format(self.name, self.email)    def __add__(self, other):   # define add to be the score addition        return self.score + other.score    def __len__(self):     # define length to be the name length        return len(self.name)stu_1 = Student('Kehan Luo', 'kl4747', 100)stu_2 = Student('Rongyao Li', 'rl4785', 99)stu_3 = Student('Test User', 'abcd', 60)stu_4 = Student.from_string('New Comer, aaaa, 70')if __name__ == '__main__':    pass    # # Here is the code if I want to curve everyone    # for i in range(1, Student.stu_num+1):    #     stu = globals()[f'stu_{i}']    #     stu.curve()    #     print(stu.score)    # # Here is the code if I wanna check whether a day is schoolday    # import datetime    # my_date = datetime.date(2004, 10, 18)    # print(Student.is_schoolday(my_date))